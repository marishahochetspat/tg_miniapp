import os
import json
import ast
import random
import logging
from typing import Dict, Any, List, Optional

from flask import Flask, request, Response
from flask_cors import CORS
from sqlalchemy import text
from db import engine

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s [APP] %(levelname)s: %(message)s",
)
logger = logging.getLogger(__name__)

# ----------------- –ö–û–ù–§–ò–ì -----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "dev-secret")
PORT = int(os.getenv("PORT", "8080"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# Telegram API (–∏—Å–ø–æ–ª—å–∑—É–µ–º requests, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PTB –Ω–µ –Ω—É–∂–Ω–∞)
import requests as rq
TG_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# ----------------- –û–ü–¶–ò–ò (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª options.py ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ) -----------------
try:
    from options import (
        budget_options, type_options, cuisine_options,
        atmosphere_options, reason_options
    )
except Exception:
    budget_options = ["–¥–µ—à–µ–≤–æ", "—Å—Ä–µ–¥–Ω–∏–π", "–¥–æ—Ä–æ–≥–æ"]
    type_options = ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–±–∞—Ä", "–∫–æ—Ñ–µ–π–Ω—è"]
    cuisine_options = ["–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–∫–∞–≤–∫–∞–∑—Å–∫–∞—è", "—è–ø–æ–Ω—Å–∫–∞—è", "–≥—Ä—É–∑–∏–Ω—Å–∫–∞—è"]
    atmosphere_options = ["—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "—Ç–∏—Ö–æ", "–≤–µ—Å–µ–ª–æ", "—Å–µ–º–µ–π–Ω–∞—è"]
    reason_options = ["—Å–≤–∏–¥–∞–Ω–∏–µ", "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "—É–∂–∏–Ω", "–¥–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞"]

category_order = ["budget", "type", "cuisine", "atmosphere", "reason"]
category_prompt = {
    "budget": "–í—ã–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç:",
    "type": "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
    "cuisine": "–í—ã–±–µ—Ä–∏ –∫—É—Ö–Ω—é:",
    "atmosphere": "–í—ã–±–µ—Ä–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:",
    "reason": "–í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:",
}
category_options_map = {
    "budget": budget_options,
    "type": type_options,
    "cuisine": cuisine_options,
    "atmosphere": atmosphere_options,
    "reason": reason_options,
}

# –ú–∞–ø–ø–∏–Ω–≥ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ë–î
column_map = {
    "–ë—é–¥–∂–µ—Ç": "–ë—é–¥–∂–µ—Ç",
    "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è",
    "–ö—É—Ö–Ω—è": "–ö—É—Ö–Ω—è",
    "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",  # –≤ –ë–î —Å –º–∞–ª–µ–Ω—å–∫–æ–π
    "–ü–æ–≤–æ–¥": "–ø–æ–≤–æ–¥",          # –≤ –ë–î —Å –º–∞–ª–µ–Ω—å–∫–æ–π
}
# –∫–ª—é—á –∏–∑ –∫–Ω–æ–ø–æ–∫ -> ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ¬ª –∏–º—è –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
key2human = {
    "budget": "–ë—é–¥–∂–µ—Ç",
    "type": "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è",
    "cuisine": "–ö—É—Ö–Ω—è",
    "atmosphere": "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞",
    "reason": "–ü–æ–≤–æ–¥",
}

# ----------------- –°–û–°–¢–û–Ø–ù–ò–ï (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) -----------------
# –í–ê–ñ–ù–û: –Ω–∞ Railway –∑–∞–ø—É—Å–∫–∞–π gunicorn —Å –û–î–ù–ò–ú –≤–æ—Ä–∫–µ—Ä–æ–º, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å.
user_state: Dict[int, Dict[str, Any]] = {}   # {user_id: {"budget": ..., "type": ..., "page_map": {"budget": 0, ...}}}

# ----------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï -----------------
def normalize(value: Optional[str], options_list: List[str]) -> Optional[str]:
    if not value:
        return value
    for opt in options_list:
        if value.strip().lower() == opt.strip().lower():
            return opt
    return value

def build_keyboard(options: List[str], prefix: str, page: int = 0, page_size: int = 10) -> Dict[str, Any]:
    start = page * page_size
    end = start + page_size
    keyboard = [[{"text": opt, "callback_data": f"{prefix}:{opt}"}] for opt in options[start:end]]

    nav_row = []
    if page > 0:
        nav_row.append({"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": f"{prefix}_page:{page - 1}"})
    if end < len(options):
        nav_row.append({"text": "‚û°Ô∏è –î–∞–ª–µ–µ", "callback_data": f"{prefix}_page:{page + 1}"})
    if nav_row:
        keyboard.append(nav_row)

    keyboard.append([{"text": "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "callback_data": "restart"}])
    return {"inline_keyboard": keyboard}

def tg_send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    resp = rq.post(f"{TG_API}/sendMessage", json=payload, timeout=15)
    if resp.status_code != 200:
        logger.error("sendMessage %s | %s", resp.status_code, resp.text)

def tg_edit_message(chat_id: int, message_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "HTML",
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    resp = rq.post(f"{TG_API}/editMessageText", json=payload, timeout=15)
    if resp.status_code != 200:
        logger.error("editMessageText %s | %s", resp.status_code, resp.text)

def tg_answer_callback(cb_id: str):
    rq.post(f"{TG_API}/answerCallbackQuery", json={"callback_query_id": cb_id}, timeout=15)

def tg_send_photo(chat_id: int, photo_url: str, caption: str):
    payload = {
        "chat_id": chat_id,
        "photo": photo_url or "https://via.placeholder.com/640x360.png?text=No+Image",
        "caption": caption[:1021] + "..." if len(caption) > 1024 else caption,
        "parse_mode": "HTML",
    }
    resp = rq.post(f"{TG_API}/sendPhoto", json=payload, timeout=20)
    if resp.status_code != 200:
        logger.error("sendPhoto %s | %s", resp.status_code, resp.text)
        tg_send_message(chat_id, caption)

# ----------------- –†–ê–ë–û–¢–ê –° –ë–î -----------------
def run_query(filters: Dict[str, Optional[str]]):
    query = "SELECT * FROM restaurants_v2 WHERE TRUE"
    params: Dict[str, Any] = {}
    for key, value in filters.items():
        if value:
            col_name = column_map[key]  # —Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
            placeholder = key.replace(" ", "_")
            query += f' AND LOWER("{col_name}") LIKE :{placeholder}'
            params[placeholder] = f"%{value.strip().lower()}%"

    logger.info("[API] SQL: %s", query)
    logger.info("[API] params: %s", params)

    with engine.connect() as conn:
        result = conn.execute(text(query), params)
        return result.mappings().all()

def clean_item(row_dict: Dict[str, Any]) -> Dict[str, Any]:
    return {k: v for k, v in row_dict.items() if v and str(v).strip().lower() != "nan"}

def generate_ai_reason(item: Dict[str, Any], filters: Dict[str, Optional[str]]) -> str:
    parts = []
    if filters.get("–ö—É—Ö–Ω—è") and filters["–ö—É—Ö–Ω—è"].lower() in (item.get("–ö—É—Ö–Ω—è") or "").lower():
        parts.append(f"–∑–¥–µ—Å—å –≥–æ—Ç–æ–≤—è—Ç –æ—Ç–ª–∏—á–Ω—É—é {filters['–ö—É—Ö–Ω—è'].lower()} –∫—É—Ö–Ω—é")
    if filters.get("–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞") and filters["–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞"].lower() in (item.get("–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞") or "").lower():
        parts.append(f"–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ ‚Äî {filters['–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞'].lower()}")
    if filters.get("–ü–æ–≤–æ–¥") and filters["–ü–æ–≤–æ–¥"].lower() in (item.get("–ø–æ–≤–æ–¥") or "").lower():
        parts.append(f"–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è: {filters['–ü–æ–≤–æ–¥'].lower()}")
    if filters.get("–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è") and filters["–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è"].lower() in (item.get("–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è") or "").lower():
        parts.append(f"—Ñ–æ—Ä–º–∞—Ç: {filters['–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è'].lower()}")
    if filters.get("–ë—é–¥–∂–µ—Ç"):
        parts.append(f"–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±—é–¥–∂–µ—Ç–∞: {filters['–ë—é–¥–∂–µ—Ç'].lower()}")
    if parts:
        return "–≠—Ç–æ –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ " + ", ".join(parts) + "."
    return "–≠—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å ‚Äî –æ–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö."

def format_card(item: Dict[str, Any], filters: Dict[str, Optional[str]]) -> str:
    name = item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    desc = item.get("–û–ø–∏—Å–∞–Ω–∏–µ")
    address = item.get("–ê–¥—Ä–µ—Å")
    metro = item.get("–ú–µ—Ç—Ä–æ")
    link = item.get("–°—Å—ã–ª–∫–∞") or item.get("–°–∞–π—Ç")
    reason = generate_ai_reason(item, filters)

    lines = [f"<b>{name}</b>"]
    if desc:    lines.append(desc)
    if address: lines.append(f"üìç {address}")
    # –º–µ—Ç—Ä–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º-—Å—Ç—Ä–æ–∫–æ–π
    if metro:
        try:
            metro_list = ast.literal_eval(metro) if isinstance(metro, str) else metro
            if isinstance(metro_list, list):
                lines.append(f"üöá {', '.join(metro_list)}")
            else:
                lines.append(f"üöá {str(metro)}")
        except Exception:
            lines.append(f"üöá {str(metro)}")
    if link:    lines.append(f"üîó {link}")
    lines.append("")
    lines.append(f"ü§ñ {reason}")
    return "\n".join(lines)

# ----------------- FLASK -----------------
app = Flask(__name__)
CORS(app)

@app.route("/")
def index():
    return "–°–µ—Ä–≤–∏—Å tg_miniapp —Ä–∞–±–æ—Ç–∞–µ—Ç! üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recommend –∏–ª–∏ Telegram-–±–æ—Ç–∞."

@app.route("/recommend", methods=["GET"])
def recommend():
    filters = {
        "–ë—é–¥–∂–µ—Ç": request.args.get("budget"),
        "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": request.args.get("type"),
        "–ö—É—Ö–Ω—è": request.args.get("cuisine"),
        "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": request.args.get("atmosphere"),
        "–ü–æ–≤–æ–¥": request.args.get("reason"),
    }

    try:
        rows = run_query(filters)
    except Exception:
        logger.exception("[API] ERROR executing query")
        return Response(json.dumps({"message": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î"}, ensure_ascii=False),
                        content_type="application/json", status=500)

    if not rows:
        return Response(json.dumps({"message": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å"}, ensure_ascii=False),
                        content_type="application/json")

    selected = rows if len(rows) <= 3 else random.sample(rows, 3)
    data = []
    for row in selected:
        item = clean_item(dict(row))
        data.append({
            "name": item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "description": item.get("–û–ø–∏—Å–∞–Ω–∏–µ"),
            "address": item.get("–ê–¥—Ä–µ—Å"),
            "metro": item.get("–ú–µ—Ç—Ä–æ"),
            "photo": item.get("–§–æ—Ç–æ"),
            "link": item.get("–°—Å—ã–ª–∫–∞") or item.get("–°–∞–π—Ç"),
            "ai_reason": generate_ai_reason(item, filters),
        })

    return Response(json.dumps(data, ensure_ascii=False), content_type="application/json")

# ----------------- TELEGRAM WEBHOOK -----------------
@app.route(f"/webhook/{WEBHOOK_SECRET}", methods=["POST"])
def telegram_webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    secret_hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret_hdr != WEBHOOK_SECRET:
        logger.warning("Wrong secret header")
        return Response("forbidden", status=403)

    update = request.get_json(silent=True) or {}
    logger.info("[TG] update: %s", json.dumps(update, ensure_ascii=False))

    # callback_query (–∫–Ω–æ–ø–∫–∏)
    if "callback_query" in update:
        return handle_callback(update["callback_query"])

    # –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = update.get("message") or update.get("edited_message")
    if not msg:
        return Response("ok")

    chat_id = msg["chat"]["id"]
    text = (msg.get("text") or "").strip()

    # /start ‚Äî —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text.startswith("/start"):
        user_state[chat_id] = {"page_map": {k: 0 for k in category_order}}
        tg_send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.\n" + category_prompt["budget"],
                        reply_markup=build_keyboard(budget_options, "budget", 0))
        return Response("ok")

    # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –∫–Ω–æ–ø–∫–∏ ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ ¬´–∫—É—Ö–Ω–µ¬ª
    user_state.setdefault(chat_id, {"page_map": {k: 0 for k in category_order}})
    filters = {"–ë—é–¥–∂–µ—Ç": None, "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": None, "–ö—É—Ö–Ω—è": text, "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": None, "–ü–æ–≤–æ–¥": None}
    return send_recommendations(chat_id, filters)

def handle_callback(cb: Dict[str, Any]):
    chat_id = cb["message"]["chat"]["id"]
    message_id = cb["message"]["message_id"]
    data = cb.get("data") or ""
    tg_answer_callback(cb.get("id"))

    state = user_state.setdefault(chat_id, {"page_map": {k: 0 for k in category_order}})
    page_map: Dict[str, int] = state.get("page_map", {})

    # restart
    if data == "restart":
        user_state[chat_id] = {"page_map": {k: 0 for k in category_order}}
        tg_edit_message(chat_id, message_id, category_prompt["budget"],
                        reply_markup=build_keyboard(budget_options, "budget", 0))
        return Response("ok")

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if "_page:" in data:
        prefix, page_str = data.split("_page:")
        page = max(0, int(page_str))
        page_map[prefix] = page
        tg_edit_message(chat_id, message_id, category_prompt[prefix],
                        reply_markup=build_keyboard(category_options_map[prefix], prefix, page))
        return Response("ok")

    # –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
    if ":" in data:
        prefix, value = data.split(":", 1)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        state[prefix] = value

        # –∫–∞–∫–∞—è —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?
        try:
            idx = category_order.index(prefix)
            next_key = category_order[idx + 1] if idx + 1 < len(category_order) else None
        except ValueError:
            next_key = None

        if next_key:
            page = page_map.get(next_key, 0)
            tg_edit_message(chat_id, message_id, category_prompt[next_key],
                            reply_markup=build_keyboard(category_options_map[next_key], next_key, page))
            return Response("ok")

        # –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä ‚Äî —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —à–æ—É–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        filters = {
            "–ë—é–¥–∂–µ—Ç": normalize(state.get("budget"), budget_options),
            "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": normalize(state.get("type"), type_options),
            "–ö—É—Ö–Ω—è": normalize(state.get("cuisine"), cuisine_options),
            "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": normalize(state.get("atmosphere"), atmosphere_options),
            "–ü–æ–≤–æ–¥": normalize(state.get("reason"), reason_options),
        }
        return send_recommendations(chat_id, filters)

    return Response("ok")

def send_recommendations(chat_id: int, filters: Dict[str, Optional[str]]):
    try:
        rows = run_query(filters)
    except Exception:
        logger.exception("[TG] DB error")
        tg_send_message(chat_id, "–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ö–æ–¥–∏—Ç—å –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ üôè")
        return Response("ok")

    if not rows:
        tg_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å üçΩÔ∏è")
        return Response("ok")

    selected = rows if len(rows) <= 3 else random.sample(rows, 3)
    for row in selected:
        item = clean_item(dict(row))
        caption = format_card(item, filters)
        tg_send_photo(chat_id, item.get("–§–æ—Ç–æ"), caption)

    tg_send_message(chat_id, "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –ø–æ–¥–±–æ—Ä–∫—É? –ù–∞–∂–º–∏ /start –∏–ª–∏ ¬´üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.")
    return Response("ok")

# ----------------- RUN -----------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT, debug=False, use_reloader=False)
