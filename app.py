import os
import json
import random
from flask import Flask, request, Response
from flask_cors import CORS
from sqlalchemy import text
from db import engine

app = Flask(__name__)
CORS(app)

# –ú–∞–ø–ø–∏–Ω–≥ API-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ -> —Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
column_map = {
    "–ë—é–¥–∂–µ—Ç": "–ë—é–¥–∂–µ—Ç",
    "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è",
    "–ö—É—Ö–Ω—è": "–ö—É—Ö–Ω—è",
    "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",  # –≤ –ë–î —Å –º–∞–ª–µ–Ω—å–∫–æ–π
    "–ü–æ–≤–æ–¥": "–ø–æ–≤–æ–¥"           # –≤ –ë–î —Å –º–∞–ª–µ–Ω—å–∫–æ–π
}

@app.route("/")
def index():
    return "–°–µ—Ä–≤–∏—Å tg_miniapp —Ä–∞–±–æ—Ç–∞–µ—Ç! üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recommend –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."

@app.route("/recommend", methods=["GET"])
def recommend():
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    filters = {
        "–ë—é–¥–∂–µ—Ç": request.args.get("budget"),
        "–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è": request.args.get("type"),
        "–ö—É—Ö–Ω—è": request.args.get("cuisine"),
        "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞": request.args.get("atmosphere"),
        "–ü–æ–≤–æ–¥": request.args.get("reason")
    }

    query = "SELECT * FROM restaurants_v2 WHERE TRUE"
    params = {}

    for key, value in filters.items():
        if value:
            col_name = column_map[key]  # —Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
            placeholder = key.replace(" ", "_")
            query += f' AND LOWER("{col_name}") LIKE :{placeholder}'
            params[placeholder] = f"%{value.strip().lower()}%"

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –Ω–∞ Railway
    print(f"[API] SQL: {query}", flush=True)
    print(f"[API] params: {params}", flush=True)

    try:
        with engine.connect() as conn:
            result = conn.execute(text(query), params)
            rows = result.mappings().all()
    except Exception as e:
        print(f"[API] ERROR executing query: {e}", flush=True)
        return Response(json.dumps({"message": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î"}), content_type="application/json", status=500)

    if not rows:
        return Response(json.dumps({"message": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å"}), content_type="application/json")

    selected = rows if len(rows) <= 3 else random.sample(rows, 3)

    data = []
    for row in selected:
        item = dict(row)
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ nan
        item_clean = {k: v for k, v in item.items() if v and str(v).strip().lower() != "nan"}

        explanation = generate_ai_reason(item_clean, filters)

        formatted_item = {
            "name": item_clean.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "description": item_clean.get("–û–ø–∏—Å–∞–Ω–∏–µ"),
            "address": item_clean.get("–ê–¥—Ä–µ—Å"),
            "metro": item_clean.get("–ú–µ—Ç—Ä–æ"),
            "photo": item_clean.get("–§–æ—Ç–æ"),
            "link": item_clean.get("–°—Å—ã–ª–∫–∞") or item_clean.get("–°–∞–π—Ç"),
            "ai_reason": explanation
        }
        data.append(formatted_item)

    return Response(json.dumps(data, ensure_ascii=False), content_type="application/json")

def generate_ai_reason(item, filters):
    parts = []
    if filters.get("–ö—É—Ö–Ω—è") and filters["–ö—É—Ö–Ω—è"].lower() in (item.get("–ö—É—Ö–Ω—è") or "").lower():
        parts.append(f"–∑–¥–µ—Å—å –≥–æ—Ç–æ–≤—è—Ç –æ—Ç–ª–∏—á–Ω—É—é {filters['–ö—É—Ö–Ω—è'].lower()} –∫—É—Ö–Ω—é")
    if filters.get("–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞") and filters["–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞"].lower() in (item.get("–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞") or "").lower():
        parts.append(f"–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ ‚Äî {filters['–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞'].lower()}")
    if filters.get("–ü–æ–≤–æ–¥") and filters["–ü–æ–≤–æ–¥"].lower() in (item.get("–ø–æ–≤–æ–¥") or "").lower():
        parts.append(f"–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è: {filters['–ü–æ–≤–æ–¥'].lower()}")
    if filters.get("–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è") and filters["–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è"].lower() in (item.get("–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è") or "").lower():
        parts.append(f"—Ñ–æ—Ä–º–∞—Ç: {filters['–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è'].lower()}")
    if filters.get("–ë—é–¥–∂–µ—Ç"):
        parts.append(f"–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±—é–¥–∂–µ—Ç–∞: {filters['–ë—é–¥–∂–µ—Ç'].lower()}")
    if parts:
        return "–≠—Ç–æ –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ " + ", ".join(parts) + "."
    return "–≠—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å ‚Äî –æ–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
