import os
import sys
import json
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
    sys.exit(1)

print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î‚Ä¶")
try:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    with engine.connect() as conn:
        # 1) –∫—Ç–æ –º—ã –∏ –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        who = conn.execute(text("select current_database(), current_user")).one()
        print(f"‚úÖ –û–∫. –ë–∞–∑–∞: {who[0]} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {who[1]}")

        # 2) —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ public
        print("\nüìö –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public:")
        tables = conn.execute(text("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema='public'
            ORDER BY table_name
        """)).fetchall()
        for t in tables:
            print("  ‚Ä¢", t[0])

        # 3) —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ restaurants_v2 (–µ—Å–ª–∏ –µ—Å—Ç—å)
        has_rv2 = any(t[0] == "restaurants_v2" for t in tables)
        if has_rv2:
            print("\nüß± –ö–æ–ª–æ–Ω–∫–∏ –≤ restaurants_v2:")
            cols = conn.execute(text("""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_schema='public' AND table_name='restaurants_v2'
                ORDER BY ordinal_position
            """)).fetchall()
            for c in cols:
                print(f"  - {c[0]} :: {c[1]}")

            # 4) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            cnt = conn.execute(text("SELECT COUNT(*) FROM restaurants_v2")).scalar()
            print(f"\nüìà –°—Ç—Ä–æ–∫ –≤ restaurants_v2: {cnt}")

            # 5) –ø—Ä–∏–º–µ—Ä 5 –∑–∞–ø–∏—Å–µ–π (–≤–∞–∂–Ω—ã–µ –ø–æ–ª—è)
            print("\nüîé –ü—Ä–∏–º–µ—Ä—ã (5 —Å—Ç—Ä–æ–∫):")
            sample = conn.execute(text("""
                SELECT "–ù–∞–∑–≤–∞–Ω–∏–µ","–ê–¥—Ä–µ—Å","–ú–µ—Ç—Ä–æ","–ö—É—Ö–Ω—è","–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è","–ë—é–¥–∂–µ—Ç","–§–æ—Ç–æ","–°—Å—ã–ª–∫–∞"
                FROM restaurants_v2
                LIMIT 5
            """)).mappings().all()
            for row in sample:
                print("‚Äî", json.dumps(dict(row), ensure_ascii=False))
        else:
            print("\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ restaurants_v2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ public.")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–∑–∞–ø—Ä–æ—Å–∞:", e)
    sys.exit(2)
