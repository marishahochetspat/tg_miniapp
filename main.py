import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import requests

from options import budget_options, type_options, cuisine_options, atmosphere_options, reason_options

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_URL = "http://localhost:5001/recommend"
user_state = {}

# –ö–∞—Ä—Ç–∞ –æ–ø—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
category_options_map = {
    "budget": budget_options,
    "type": type_options,
    "cuisine": cuisine_options,
    "atmosphere": atmosphere_options,
    "reason": reason_options
}

# /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ Restart
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_state[user_id] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç:",
        reply_markup=build_keyboard(budget_options, 'budget')
    )

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def build_keyboard(options, prefix, page=0, page_size=10):
    start = page * page_size
    end = start + page_size
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"{prefix}:{opt}")]
        for opt in options[start:end]
    ]
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_page:{page - 1}"))
    if end < len(options):
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{prefix}_page:{page + 1}"))
    if nav:
        keyboard.append(nav)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    keyboard.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")])

    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
    if data == "restart":
        user_state[user_id] = {}
        await query.edit_message_text("–û–∫–µ–π! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç:",
                                      reply_markup=build_keyboard(budget_options, 'budget'))
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if '_page:' in data:
        prefix, page = data.split('_page:')
        page = int(page)
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏ {prefix}:",
            reply_markup=build_keyboard(category_options_map[prefix], prefix, page)
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    category, value = data.split(":", 1)
    user_state[user_id][category] = value

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    next_step = {
        "budget": ("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:", type_options, 'type'),
        "type": ("–í—ã–±–µ—Ä–∏ –∫—É—Ö–Ω—é:", cuisine_options, 'cuisine'),
        "cuisine": ("–í—ã–±–µ—Ä–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:", atmosphere_options, 'atmosphere'),
        "atmosphere": ("–í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:", reason_options, 'reason'),
        "reason": ("–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ–±—è:", None, None)
    }

    if category == "reason":
        await show_recommendations(query, user_state[user_id])
        return

    msg, options, next_key = next_step[category]
    await query.edit_message_text(msg, reply_markup=build_keyboard(options, next_key))

# –ü–æ–∫–∞–∑ –ø–æ–¥–±–æ—Ä–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
async def show_recommendations(query, filters):
    params = {
        "budget": filters.get("budget"),
        "type": filters.get("type"),
        "cuisine": filters.get("cuisine"),
        "atmosphere": filters.get("atmosphere"),
        "reason": filters.get("reason")
    }

    try:
        response = requests.get(API_URL, params=params)
        data = response.json()
    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not data or "message" in data:
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        return

    messages = []
    for place in data[:3]:
        text = f"<b>{place.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        if place.get("–û–ø–∏—Å–∞–Ω–∏–µ"):
            text += f"{place['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
        if place.get("–ê–¥—Ä–µ—Å"):
            text += f"üìç {place['–ê–¥—Ä–µ—Å']}\n"
        if place.get("–ú–µ—Ç—Ä–æ"):
            text += f"üöá {place['–ú–µ—Ç—Ä–æ']}\n"
        if place.get("–°—Å—ã–ª–∫–∞"):
            text += f"<a href=\"{place['–°—Å—ã–ª–∫–∞']}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"

        reason = place.get("ai_reason") or "–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."
        text += f"\nü§ñ {reason}"

        photo = place.get("–§–æ—Ç–æ") or "https://via.placeholder.com/640x360.png?text=No+Image"
        messages.append((photo, text))

    media = [InputMediaPhoto(media=photo, caption=txt, parse_mode="HTML") for photo, txt in messages]
    await query.message.reply_media_group(media)
    await query.message.reply_text("–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥–±–æ—Ä? –ù–∞–∂–º–∏ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from telegram.ext import filters

    app = ApplicationBuilder().token("8240440485:AAEPlsFOpm1aYRl9WWMmfx9Ltb2wI529BRQ").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
