import os
import logging
import ast
import asyncio
import functools
import requests

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

from options import (
    budget_options, type_options, cuisine_options,
    atmosphere_options, reason_options
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [BOT] %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

# ----------------- –ö–û–ù–§–ò–ì -----------------
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # –ó–∞–¥–∞–π –≤ Railway ‚Üí Variables
API_URL = f"http://127.0.0.1:{os.environ.get('PORT', 5000)}/recommend"  # –ª–æ–∫–∞–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞

user_state = {}

category_options_map = {
    "budget": budget_options,
    "type": type_options,
    "cuisine": cuisine_options,
    "atmosphere": atmosphere_options,
    "reason": reason_options
}

# ----------------- –£–¢–ò–õ–ò–¢–´ -----------------
def normalize(value, options_list):
    if not value:
        return value
    for opt in options_list:
        if value.strip().lower() == opt.strip().lower():
            return opt
    return value

def build_keyboard(options, prefix, page=0, page_size=10):
    start = page * page_size
    end = start + page_size
    keyboard = [[InlineKeyboardButton(opt, callback_data=f"{prefix}:{opt}")] for opt in options[start:end]]
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_page:{page - 1}"))
    if end < len(options):
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{prefix}_page:{page + 1}"))
    if nav:
        keyboard.append(nav)
    keyboard.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")])
    return InlineKeyboardMarkup(keyboard)

async def fetch_api(url, params):
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π requests.get + timeout."""
    loop = asyncio.get_running_loop()
    fn = functools.partial(requests.get, url, params=params, timeout=15)
    return await loop.run_in_executor(None, fn)

# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç:",
        reply_markup=build_keyboard(budget_options, 'budget')
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "restart":
        user_state[user_id] = {}
        await query.edit_message_text(
            "–û–∫–µ–π! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç:",
            reply_markup=build_keyboard(budget_options, 'budget')
        )
        return

    if "_page:" in data:
        prefix, page = data.split("_page:")
        page = int(page)
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏ {prefix}:",
            reply_markup=build_keyboard(category_options_map[prefix], prefix, page)
        )
        return

    category, value = data.split(":", 1)
    user_state[user_id][category] = value

    next_step = {
        "budget": ("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:", type_options, 'type'),
        "type": ("–í—ã–±–µ—Ä–∏ –∫—É—Ö–Ω—é:", cuisine_options, 'cuisine'),
        "cuisine": ("–í—ã–±–µ—Ä–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:", atmosphere_options, 'atmosphere'),
        "atmosphere": ("–í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:", reason_options, 'reason'),
        "reason": ("–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ–±—è:", None, None)
    }

    if category == "reason":
        await show_recommendations(query, user_state[user_id])
        return

    msg, options, next_key = next_step[category]
    await query.edit_message_text(msg, reply_markup=build_keyboard(options, next_key))

MAX_CAPTION_LENGTH = 1024

async def show_recommendations(query, filters):
    params = {
        "budget": normalize(filters.get("budget"), budget_options),
        "type": normalize(filters.get("type"), type_options),
        "cuisine": normalize(filters.get("cuisine"), cuisine_options),
        "atmosphere": normalize(filters.get("atmosphere"), atmosphere_options),
        "reason": normalize(filters.get("reason"), reason_options)
    }

    # 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π ¬´—Å–æ–Ω–Ω–æ–≥–æ¬ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞/—Å–µ—Ç–∏
    for attempt in range(3):
        try:
            response = await fetch_api(API_URL, params)
            logger.info(f"‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∫ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3): {params}")
            logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç API: {response.status_code} {response.text[:500]}")
            data = response.json()
            break
        except Exception as e:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å API (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3): {e}")
            if attempt < 2:
                await asyncio.sleep(2 * (attempt + 1))
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

    if not data or (isinstance(data, dict) and data.get("message")):
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        return

    for place in data[:3]:
        text = f"<b>{place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        if place.get("description"):
            text += f"{place['description']}\n"
        if place.get("address"):
            text += f"üìç {place['address']}\n"

        metro_raw = place.get("metro", "")
        try:
            metro_list = ast.literal_eval(metro_raw)
            metro_str = ", ".join(metro_list) if isinstance(metro_list, list) else str(metro_list)
        except Exception:
            metro_str = str(metro_raw) if metro_raw else "‚Äî"
        if metro_str:
            text += f"üöá {metro_str}\n"

        if place.get("link"):
            text += f"<a href=\"{place['link']}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"

        reason = place.get("ai_reason") or "–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."
        text += f"\nü§ñ {reason}"

        if len(text) > MAX_CAPTION_LENGTH:
            text = text[:MAX_CAPTION_LENGTH - 3] + "..."

        photo = place.get("photo") or "https://via.placeholder.com/640x360.png?text=No+Image"

        try:
            await query.message.reply_photo(photo=photo, caption=text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await query.message.reply_text(text, parse_mode="HTML")

    await query.message.reply_text(
        "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥–±–æ—Ä? –ù–∞–∂–º–∏ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]])
    )

# ----------------- –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø -----------------
async def on_startup(app):
    # –°–Ω—è—Ç—å webhook, —á—Ç–æ–±—ã polling –Ω–µ –ª–æ–≤–∏–ª 409/Conflict
    await app.bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞—é polling‚Ä¶")

def build_application():
    if not BOT_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ Railway")
    return (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(on_startup)   # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        .build()
    )

def main():
    app = build_application()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    # drop_pending_updates ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á–∏—Å—Ç–∏–º –±—ç–∫–ª–æ–≥
    app.run_polling(allowed_updates=list(), drop_pending_updates=True)

if __name__ == "__main__":
    main()
